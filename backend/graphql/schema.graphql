"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    movie(id: ID @eq): Movie @find
    movies: [Movie]! @all
    screening(id: ID @eq): Screening @find
    user(id: ID @eq): User @find
    user(email: String @eq): User @find
    seat(id: ID @eq): Seat @find
    seats(available: Boolean @eq): Seat @find
    tickets(
    screening_id: Int! @eq
    seat_id: Int! @eq 
    user_id: Int! @eq 
      ): [Ticket!]! @find
}

type Mutation {
  createSeat(row: Int!, number: Int!, available: Boolean!): Seat @create(model: "App\\Models\\Seat")
  createMovie(title: String!, tag: String!, duration: Int!, short_description: String!, long_description: String! ): Movie @create(model: "App\\Models\\Movie")
  createUser(first_name: String!, last_name: String!, email: String!, password: String!, group: String!): User @create
  createScreening(movie_id: Int!, language: String!, type: String, description: String!, time: DateTime!): Screening @create
  createTicket(screening_id: Int!, seat_id: Int!, user_id: Int!): Ticket @create

}


type User {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    password: String!
    group: String!
    tickets: [Ticket!]! @hasMany
}


type Screening {
  id: ID!
  movie: Movie! @belongsTo
  tickets: [Ticket!]! @hasMany
  language: String!
  type: String!
  description: String!
  time: DateTime!
}


type Movie {
  id: ID
  title: String!
  tag: String!
  duration: Int!
  short_description: String!
  long_description: String!
  screenings: [Screening!]! @hasMany
}

type Seat {
  id: ID
  row: Int!
  number: Int!
  available: Boolean!
  tickets: [Ticket!]! @hasMany
}

type Ticket {
  screening: Screening @belongsTo
  seat: Seat @belongsTo
  user: User @belongsTo
}